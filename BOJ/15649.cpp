#include <iostream>

#include "../include/debugopen.hpp"

/*
	[Silver 3]
    N과 M(1)

    자연수 N과 M이 주어졌을 때, (N,M<=8)
    - 길이가 M이고,
    - 1~N까지의 자연수 중 중복 없이 M개를 고른 수열

    (ex)
    1234
    1243
    이런식

    => 즉 원소가 1~N이고 길이가 M인 순열(중복 없고 순서 있게 모든 가능성을 출력)을 출력하라

    ----
    [IDEA]
    1. M개를 선택해야 한다.
    2. 모든 가능성을 순회해야 한다.
    3. 재귀로 푼다.
    4. for문을 많이 사용하지 않는다.

    (ex)
    N=3, M=1
    1
    2
    3

    (ex)
    N=5, M=3
    1 2 3
    1 2 4
    1 2 5
    1 3 2
    1 3 4
    1 3 5
    .
    .
    .
    5 4 3

    왜 이름이 백트래킹인가?
    - 상태를 이전으로 되돌리기 때문에 후퇴한다는 의미로 백트래킹이라고 한다.
    - 탐색을 재귀로 해야 백트래킹이 가능하다? (잘 모르겠음.)
*/
using namespace std;

// 숫자 0~9
// 최대 8자릿수까지. 1~8째 자리만 접근하니까 nums[9]도 괜찮다.
bool used[9] = {0};
int nums[9] = {0};
int N, M;

/*
    중복 조합 고르듯 매 자리수마다 아무 숫자를 고르는데, 
    조건문으로 사용된 숫자이면 그 다음의 숫자를 선택한다.

    실제로 모든 조합의 경우의 수를 출력하므로 못해도 O(N^M)일 것이다.
*/
void backtrack(int curIdx) // curIdx=1,curIdx=2
{
    int i, num;
    // 일단 호출된 이상, 해당 자릿수에 숫자가 할당돼야 하며, 적어도 하나의 숫자가 할당 가능하다.
    // 매 자리수마다 후보는 1~N
    for (num = 1; num <= N; num++) // N=5, 1,2,3,4,5
    /*
    1 2

    _ _ _ _ (M=4)


    */
    {
        // 숫자 사용 불가 시 PASS
        if (used[num])
            continue;

        // 해당 숫자 사용
        used[num] = true;
        nums[curIdx] = num;

        // 출력부: curIdx=M 일 때, 이걸 채우고 나서 출력해야 함
        // 자릿수에 대응되는 숫자를 어떻게 파악할 수 있을까?
        // 그냥 선택하자 마자 출력하는 방법도 있잖아요
        // 근데 그럼 첫 출력은 완벽한데, 두 번째부터는 가지친 숫자들만 출력됨
        // 그냥 배열 하나 더 쓰면 됨 굿

        // 재귀부: 다음 자릿수로 이동
        if (curIdx < M)
            backtrack(curIdx + 1); // curIdx는 현재 자리를 의미
        else
        {
            // 결과 달성
            // 출력부: 각 자릿수에 선택된 숫자들을 출력
            for (i = 1; i < M; i++)
                cout << nums[i] << " ";
            cout << nums[i] << "\n";
        }

        /*
        다음 자릿수로 이동했다가 숫자 사용이 불가능했거나, 출력한 경우
        다음 숫자를 쓸 예정이므로 현재 숫자 반납

        [CASE 1] 출력한 경우
        ex: N=5, M=4 일때, 1234 출력한 경우 -> used[]=11110, nums=1234
            이후 4를 반환한 후 경로 ? num=5 이고, used[]=11100, nums=123
            여기서 used[5]=true, nums[4]=5 이면 used[]=11101, nums=1235 이다.
            이후 5를 반환한 후 num=6이므로 for문이 종료된다(해당 분기의 함수가 종료된다.)
        
        [CASE 2] 이전에 호출한 `backtrack(idx+1)`에서 돌아온 경우
            각 자리에서 0~N까지의 숫자를 모두 사용했으면 해당 자리수를 반환하고 돌아온다.
            (ex) N=5, M=4일 때 12완성 후 backtrack(3)이 호출된 경우, 셋째 자리는 3,4가 들어갈 수 있을 것이므로 123x ~ 125x 까지 돌고 복귀한다.
                복귀한 경우 12를 완성했었으니 이제 13이 두 자리일 것이므로, 132x ~ 135x 까지 돌고 복귀한다.
            최초로 호출했던 `backtrack(1)`은 첫째 자리수에 대해 0~N까지 반복하므로, 1xxx ~ 5xxx까지 반복하고 종료할 것이다.
            그렇게 되면 모든 호출이 종료된다.
        */

        used[num] = false;
        nums[curIdx] = 0; // 현재 자리의 숫자를 0으로 놓은 것 (문제에서 0을 안 쓰니까 괜찮음)
    }
}

int main()
{
    int i;
    READ_TXT("./input.txt", "rt", stdin);
    cin >> N >> M;
    backtrack(1);
}