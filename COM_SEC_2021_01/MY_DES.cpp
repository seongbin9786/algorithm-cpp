#include <iostream>
#include <bitset>
#include <queue>

#include "../include/debugopen.hpp"

using namespace std;

/*
DES를 구현해보자

큰 그림 과정:
- 64bit 내용, 64bit 시크릿을 받아, 64->56비트로 바꾼다. (패리티 피트 제거는 퍼뮤테이션이 해 줌)
- 내용을 IP에 통과시킨 후, 16라운드를 진행 후 Inverse IP를 통과시킨다.
- 각 라운드 마다:
	- 64비트를 32비트씩 나눈다. 이를 L, R로 부른다.
	- L은 이전 Round의 R, R은 이전 Round의 L로 시작한다.
	- R은 Expansion Permutation을 거쳐 32->48 비트로 커진다.
	- 48비트인 key와 XOR을 수행한다.
	- S-BOX 를 거쳐 (Substition) 48->32 비트로 작아진다.
	- 그냥 상수 Permutation을 거친다.
	- 놀고 있던 L과 XOR을 한다.
	=> R이다.
	- L은 그냥 놀고 끝난다.

- 키는 각 Round 마다 다른 과정을 거친다.
	- 56비트의 키를 28비트씩 나눈다. 이를 L, R로 부른다.
	- L, R 모두 left shift 한다.
	- 일단 이 값은 따로 저장해서 다음 라운드의 L, R로 쓴다. (교차 하지 않음)
	- L+R을 상수 Permutation을 거친다.
	- L+R은 48비트이므로, 내용과 XOR하는 데 사용된다. (이후 이 내용은 버린다.)

필요한 준비물:
	1. 상수 준비물 [v]
		- Key Selection Permutation [v]
		- Key Permutation [v]
		- Expansion Permutation [v]
		- S-Box 8개 [v]
		- P-BOX 1개 [v]

		참고로 Permutation은 그냥 1차원 배열인데 보기 좋으라고 NxM로 표현해놓은 것일 뿐임

	2. 선언해야 할 변수
		- 

*/

const int IP[8][8] = {
    {58, 50, 42, 34, 26, 18, 10, 2},
    {60, 52, 44, 36, 28, 20, 12, 4},
    {62, 54, 46, 38, 30, 22, 14, 6},
    {64, 56, 48, 40, 32, 24, 16, 8},
    {57, 49, 41, 33, 25, 17, 9, 1},
    {59, 51, 43, 35, 27, 19, 11, 3},
    {61, 53, 45, 37, 29, 21, 13, 5},
    {63, 55, 47, 39, 31, 23, 15, 7},
};

const int IIP[8][8] = {
    {40, 8, 48, 16, 56, 24, 64, 32},
    {39, 7, 47, 15, 55, 23, 63, 31},
    {38, 6, 46, 14, 54, 22, 62, 30},
    {37, 5, 45, 13, 53, 21, 61, 29},
    {36, 4, 44, 12, 52, 20, 60, 28},
    {35, 3, 43, 11, 51, 19, 59, 27},
    {34, 2, 42, 10, 50, 18, 58, 26},
    {33, 1, 41, 9, 49, 17, 57, 25},
};

// 키: 64비트 -> 56 비트 - 패리티 비트 제거용
const int KEY_SELECT_PERM[8][7] = {
    {57, 49, 41, 33, 25, 17, 9},
    {1, 58, 50, 42, 34, 26, 18},
    {10, 2, 59, 51, 43, 35, 27},
    {19, 11, 3, 60, 52, 44, 36},
    {63, 55, 47, 39, 31, 23, 15},
    {7, 62, 54, 46, 38, 30, 22},
    {14, 6, 61, 53, 45, 37, 29},
    {21, 13, 5, 28, 20, 12, 4},
};

const int LEFT_SHIFT_CNT[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

// 키: 56비트 -> 48 비트 변환용
const int KEY_PERM[4][12] = {
    {14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10},
    {41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48},
    {23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2},
    {44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32},
};

// 내용 32비트 -> 48비트 변환용
const int EXP_PERM[8][6] = {
    {32, 1, 2, 3, 4, 5},
    {4, 5, 6, 7, 8, 9},
    {8, 9, 10, 11, 12, 13},
    {12, 13, 14, 15, 16, 17},
    {16, 17, 18, 19, 20, 21},
    {20, 21, 22, 23, 24, 25},
    {24, 25, 26, 27, 28, 29},
    {28, 29, 30, 31, 32, 1},
};

// SBox 8개
// const int SBOX[8][4][16] = {
// 	{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 00, 7},
// 	{00, 15, 7, 4, 14, 2, 13, 10, 1, 6, 12, 11, 9, 5, 3, 8},
// 	{4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 00},
// 	{15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 00, 6, 13},
// };
const int SBOX[8][4][16] = {
    {/* S1 */
     14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
     0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
     4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
     15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13},
    {/* S2 */
     15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
     3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
     0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
     13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9},
    {/* S3 */
     10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
     13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
     13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
     1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12},
    {/* S4 */
     7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
     13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
     10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
     3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14},
    {/* S5 */
     2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
     14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
     4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
     11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3},
    {/* S6 */
     12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
     10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
     9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
     4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13},
    {/* S7 */
     4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
     13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
     1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
     6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12},
    {/* S8 */
     13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
     1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
     7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
     2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11},
};

const int P_BOX_PERM[2][16] = {
    {16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10},
    {2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25},
};

int main()
{
    READ_TXT("./input.txt", "rt", stdin);
    /*
	Q. 입력이 char[] 로 들어오는데, 이걸 어떻게 bit로 변환할 수 있을까?

	A:

	1. ascii 뺄셈으로 [0-9] - '0', [a-z] - 'a' 하면 된다.
	- char 마다 4bit로 처리해야 하면 되는데, 어떻게 concat 하지?
	- 

	2. 64bit 이므로, unsingned 8byte 정수 타입을 쓰면 된다.
	- bitset 이든 int 이든 뭐든 결국 binary 데이터이므로 임시 저장소의 역할은 할 수 있다.

    3. 

	*/
    bitset<64> binary(0b1);
    cout << binary << "\n";
    return 0;
}
